# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import firework_transfer_pb2 as firework__transfer__pb2


class FireworkQueueServiceStub(object):
  """data transfer service
  """

  def __init__(self, channel):
    """Constructor.
    Args:
      channel: A grpc.Channel.
    """
    self.produce = channel.stream_stream(
        '/com.firework.cluster.rpc.FireworkQueueService/produce',
        request_serializer=firework__transfer__pb2.ProduceRequest.SerializeToString,
        response_deserializer=firework__transfer__pb2.ProduceResponse.FromString,
        )
    self.produceUnary = channel.unary_unary(
        '/com.firework.cluster.rpc.FireworkQueueService/produceUnary',
        request_serializer=firework__transfer__pb2.ProduceRequest.SerializeToString,
        response_deserializer=firework__transfer__pb2.ProduceResponse.FromString,
        )
    self.consume = channel.unary_stream(
        '/com.firework.cluster.rpc.FireworkQueueService/consume',
        request_serializer=firework__transfer__pb2.ConsumeRequest.SerializeToString,
        response_deserializer=firework__transfer__pb2.ConsumeResponse.FromString,
        )
    self.consumeUnary = channel.unary_unary(
        '/com.firework.cluster.rpc.FireworkQueueService/consumeUnary',
        request_serializer=firework__transfer__pb2.ConsumeRequest.SerializeToString,
        response_deserializer=firework__transfer__pb2.ConsumeResponse.FromString,
        )
    self.queryTransferQueueInfo = channel.unary_unary(
        '/com.firework.cluster.rpc.FireworkQueueService/queryTransferQueueInfo',
        request_serializer=firework__transfer__pb2.QueryTransferQueueInfoRequest.SerializeToString,
        response_deserializer=firework__transfer__pb2.QueryTransferQueueInfoResponse.FromString,
        )
    self.cancelTransfer = channel.unary_unary(
        '/com.firework.cluster.rpc.FireworkQueueService/cancelTransfer',
        request_serializer=firework__transfer__pb2.CancelTransferRequest.SerializeToString,
        response_deserializer=firework__transfer__pb2.CancelTransferResponse.FromString,
        )


class FireworkQueueServiceServicer(object):
  """data transfer service
  """

  def produce(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def produceUnary(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def consume(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def consumeUnary(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def queryTransferQueueInfo(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def cancelTransfer(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_FireworkQueueServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'produce': grpc.stream_stream_rpc_method_handler(
          servicer.produce,
          request_deserializer=firework__transfer__pb2.ProduceRequest.FromString,
          response_serializer=firework__transfer__pb2.ProduceResponse.SerializeToString,
      ),
      'produceUnary': grpc.unary_unary_rpc_method_handler(
          servicer.produceUnary,
          request_deserializer=firework__transfer__pb2.ProduceRequest.FromString,
          response_serializer=firework__transfer__pb2.ProduceResponse.SerializeToString,
      ),
      'consume': grpc.unary_stream_rpc_method_handler(
          servicer.consume,
          request_deserializer=firework__transfer__pb2.ConsumeRequest.FromString,
          response_serializer=firework__transfer__pb2.ConsumeResponse.SerializeToString,
      ),
      'consumeUnary': grpc.unary_unary_rpc_method_handler(
          servicer.consumeUnary,
          request_deserializer=firework__transfer__pb2.ConsumeRequest.FromString,
          response_serializer=firework__transfer__pb2.ConsumeResponse.SerializeToString,
      ),
      'queryTransferQueueInfo': grpc.unary_unary_rpc_method_handler(
          servicer.queryTransferQueueInfo,
          request_deserializer=firework__transfer__pb2.QueryTransferQueueInfoRequest.FromString,
          response_serializer=firework__transfer__pb2.QueryTransferQueueInfoResponse.SerializeToString,
      ),
      'cancelTransfer': grpc.unary_unary_rpc_method_handler(
          servicer.cancelTransfer,
          request_deserializer=firework__transfer__pb2.CancelTransferRequest.FromString,
          response_serializer=firework__transfer__pb2.CancelTransferResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'com.firework.cluster.rpc.FireworkQueueService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))